#include <iostream>
using namespace std;

// 三条规律
// 数组名相当于指向数组第一个元素的指针（一维数组第一个元素是个int值，二维数组第一个元素是一个由第一行多个值组成的小数组）
// &E 相当于把 E 的管辖范围上升一个级别
// *E 相当于把 E 的管辖范围下降一个级别

int main()
{
    int a[4] = {1, 3, 5, 7};

    /*
    https://www.coursera.org/learn/c-chengxu-sheji/lecture/IPIcx/qu-di-zhi-yu-zhi-zhen-yun-suan
    a 呢，是相当于指向数组首元素的那个指针。而 &a 也就是取地址符号加上 a ，相当于什么呢？
    相当于指向整个数组的一个指针。
    啊，也就是说啊，这两个 a 啊， 虽然打印出的地址是同一个地址， 但是它们的管辖范围不同。
    那么这个 a 呢，它的管辖范围只是数组的首元素。但是 &a 这个表达式所返回的那个指针，
    它的管辖范围是哪呢？是整个数组。是整个数组。 虽然他们打印出的地址是一样的，但是它们的
    管辖范围完全不同。啊也就是说， 如果在数组名字前面加上一个 & 的符号的话，
    就相当于把这个数组名字的管辖范围 上升了一级，给它升官了。明白这个意思了吗？
    啊，这就是 &a 的含义。好！ 我们呢清理一下屏幕，接着往下看， 通过刚才我们这个介绍啊，
    大家都知道， &a实际上是一个指向整个数组的一个指针。那么在打印完&a以后，我再去打印 &a+1，
    请问它会打印哪个地址呢？ 那根据我们前面讲过的，如果对一个指针进行+1的话，
    它会跨过它的基类型所占用的全部内存单元。 对不对，如果对a进行+1，我们得到了这个地址，
    得到了这个结果；如果对&a+1的时候，我们应该得到哪个结果啊？是不是从这 将跨越整个数组啊，
    对不对，将会跨越这个数组a+1。所以说 &a+1会指向哪里？会打印哪个地址啊，会打印这个地址。
    这是&a+1的这个涵义。 它会跨越整个数组。
    */

    cout << a << endl;     // a 相当于 &a[0]，不同于 &a，&a是对整个数组。但是打印地址都是第一个元素的地址
    cout << a + 1 << endl; // a 的管辖范围是数组的首元素，a + 1 打印数组第二个元素的地址
    cout << &a << endl;
    cout << &a + 1 << endl;    // &a 的管辖范围是整个数组，所以 &a + 1 会跨过整个数组的存储范围，打印数组最后一个元素后面的地址
    cout << *(&a) << endl;     // 就相当于打印 a
    cout << *(&a) + 1 << endl; // 就相当于打印 a + 1

    return 0;
}
